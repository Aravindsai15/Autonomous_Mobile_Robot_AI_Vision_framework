<launch>
  <!-- Environment Variables -->
  <env name="LD_PRELOAD" value="/usr/lib/aarch64-linux-gnu/libgomp.so.1" />
  <env name="OMP_NUM_THREADS" value="1" />
  <env name="MKL_NUM_THREADS" value="1" />
  <env name="OPENBLAS_NUM_THREADS" value="1" />

  <!-- ============================================= -->
  <!-- 1. Static Transforms -->
  <!-- ============================================= -->


  <!-- <node pkg="tf" type="static_transform_publisher" name="base_rotation_correction"
      args="0 0 0 0 0 -1.5708 base_link base_link 100"/> -->



  <node pkg="tf" type="static_transform_publisher" name="base_to_imu"
        args="0 0 0 0 0 0 base_link imu_link 100"/>
 
  <node pkg="tf" type="static_transform_publisher" name="base_to_camera_link"
        args="0.1 0 0 0 0 0 base_link camera_link 100"/>

  <node pkg="tf" type="static_transform_publisher" name="camera_link_to_optical"
        args="0 0 0 -1.5708 0 -1.5708 camera_link camera_infra1_optical_frame 100"/>

  <node pkg="tf" type="static_transform_publisher" name="base_to_gps"
        args="0 0 0 0 0 0 base_link gps 100"/>




<!-- ============================================= -->
<!-- Corrected Static Transforms -->
<!-- ============================================= -->


      


  <!-- <node pkg="tf" type="static_transform_publisher" name="vo_to_odom"
      args="0 0 0 0 0 0 vo odom 100"/>


  <node pkg="tf" type="static_transform_publisher" name="map_to_base" 
        args="0 0 0 0 0 0 map base_link 100"/> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_base"
        args="0 0 0 0 0 0 odom base_link 100"/> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_odom_init" 
      args="0 0 0 0 0 0 map odom 100"/>  -->
      <!-- Ensure proper frame ordering -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_odom"
        args="0 0 0 0 0 0 map odom 100"/> -->


  <!-- ============================================= -->
  <!-- 2. Sensor Nodes -->
  <!-- ============================================= -->
  <!-- <node pkg="usb_cam" type="usb_cam_node" name="usb_cam" output="screen" respawn="true">
    <param name="video_device" value="/dev/video0"/>
    <param name="camera_frame_id" value="camera_link"/>
    <param name="image_width" value="640"/>
    <param name="image_height" value="480"/>
    <param name="framerate" value="15"/>
    <param name="pixel_format" value="yuyv"/>
    <param name="camera_info_url" value="file://$(find usb_cam)/camera_info/camera.yaml"/>
    <param name="camera_name" value="usb_cam"/>

    <param name="flip_horizontal" value="false"/>
    <param name="flip_vertical" value="false"/>


    <remap from="/usb_cam/image_raw" to="camera/color/image_raw"/>
  </node> -->

    
  <include file="$(find realsense2_camera)/launch/rs_camera.launch">
      <!-- Stereo Configuration -->

      <arg name="publish_tf" value="true"/>  <!-- Enables cameraâ†’base_link tf -->
      <arg name="tf_publish_rate" value="30"/>


      <arg name="enable_infra1" value="true"/>
      <arg name="enable_infra2" value="true"/>
      <arg name="infra_width" value="640"/>
      <arg name="infra_height" value="480"/>
      <arg name="infra_fps" value="15"/>
      
      <!-- RGB Configuration -->
      <arg name="enable_color" value="true"/>
      <arg name="color_width" value="640"/>
      <arg name="color_height" value="480"/>
      <arg name="color_fps" value="15"/>
      
      <!-- Common Settings -->
      <arg name="enable_depth" value="true"/>
      <arg name="enable_sync" value="true"/>
      <arg name="align_depth" value="false"/>

  </include>

  <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" ns="camera" output="screen">
      <remap from="left/image_raw" to="/infra1/image_rect_raw"/>
      <remap from="right/image_raw" to="/infra2/image_rect_raw"/>
      <remap from="left/image_mono" to="/infra1/image_rect_raw"/>
      <remap from="right/image_mono" to="/infra2/image_rect_raw"/>
      <remap from="left/camera_info" to="/infra1/camera_info"/>
      <remap from="right/camera_info" to="/infra2/camera_info"/>
  </node>




  <!-- 3. Stereo Odometry Node (Replace rgbd_odometry) -->
  <node pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen">
      <param name="publish_tf" value="true"/>

      <param name="frame_id" value="base_link"/>
      <param name="odom_frame_id" value="odom"/>
      
      <remap from="left/image_rect" to="/camera/infra1/image_rect_raw"/>
      <remap from="right/image_rect" to="/camera/infra2/image_rect_raw"/>
      <remap from="left/camera_info" to="/camera/infra1/camera_info"/>
      <remap from="right/camera_info" to="/camera/infra2/camera_info"/>
      
      <param name="Vis/FeatureType" value="6"/> 
      <param name="Vis/MaxFeatures" value="500"/>
      <param name="Odom/GuessMotion" value="true"/> 
      <param name="OdomF2M/MaxSize" value="1000"/>
      <param name="Odom/EstimationType" value="1"/>  

      <param name="Vis/CorType" value="0"/>  <!-- 0=FAST, 1=ORB -->
      <param name="Stereo/MinDisparity" value="5"/>

      <param name="Stereo/MaxDisparity" value="256"/>  <!-- Or try 192 or 256 -->
      <param name="Stereo/WinSize" value="7"/>         <!-- Matching window size -->
      <param name="Stereo/Epipolar" value="true"/>     <!-- Enforces better stereo constraint -->
      <remap from="odom" to="/odometry/stereo"/>
  </node>



  <node pkg="autobot_ai" type="imu_9axis_node.py" name="imu_9axis_node" output="screen">
    <param name="i2c_bus" value="1"/>
    <param name="i2c_address" value="40"/>
    <param name="frame_id" value="imu_link"/>
    <param name="publish_rate" value="10.0"/>
    <param name="orientation_covariance" value="0.05"/>
    <param name="angular_velocity_covariance" value="0.02"/>
    <param name="linear_acceleration_covariance" value="0.04"/>
    <remap from="/sensors/imu/data" to="/imu/data"/>
    <remap from="/imu/mag" to="/mag"/>
  </node>

  <node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="nmea_serial_driver" output="screen">
    <param name="port" value="/dev/ttyTHS1"/>
    <param name="baud" value="9600"/>
    <param name="frame_id" value="gps"/>
    <remap from="/fix" to="/sensors/gps/fix"/> 
  </node>







  <!-- ============================================= -->
  <!-- 3. Localization Nodes -->
  <!-- ============================================= -->

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" output="screen">
    <param name="world_frame" value="odom"/>
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="base_link_frame" value="base_link"/>
    <param name="publish_tf" value="true"/>
    <param name="tf_prefix" value=""/>

    <param name="frequency" value="15"/>
    <param name="transform_time_offset" value="0.0"/>
    <param name="transform_tolerance" value="0.1"/>
    <param name="sensor_timeout" value="0.5"/>


    <param name="odom0" value="/odometry/stereo"/>
    <rosparam param="odom0_config">
      [true, true, false,   false, false, false, 
      false, false, false, false, false, false,
      false, false, false]
    </rosparam>
    <param name="odom0_differential" value="true"/>

    <param name="imu0" value="/imu/data"/>
    <rosparam param="imu0_config">
      [false, false, false,  true, true, true,
      false, false, false,  true, true, true,
      false, false, false]
    </rosparam>

    <param name="odom1" value="/odometry/gps"/>
    <rosparam param="odom1_config">
      [true, true, false,   false, false, false,
      false, false, false, false, false, false,
      false, false, false]
    </rosparam>
  </node>

  <!-- <node pkg="autobot_ai" type="ekf_toggle.py" name="ekf_toggle" output="screen"/>


  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_local" clear_params="true">
    <rosparam command="load" file="$(find autobot_ai)/config/ekf_local.yaml"/>
    <remap from="/odometry/filtered" to="/odometry/filtered/local"/>
  </node>

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_global" clear_params="true">
    <rosparam command="load" file="$(find autobot_ai)/config/ekf_global.yaml"/>
    <remap from="/odometry/filtered" to="/odometry/filtered/global"/>
  </node> -->


<!-- GPS + IMU + Odometry (when GPS is present)

VIO + IMU (when GPS is not available)

 It will always produce map â†’ odom transform.
 -->






  <!-- <node pkg="diagnostic_aggregator" type="aggregator" name="diagnostic_aggregator">
      <rosparam command="load" file="$(find autobot_ai)/config/diagnostics.yaml"/>
  </node> -->


  <!-- Remap semantic costmap to move_base -->
  <node pkg="topic_tools" type="relay" name="semantic_to_costmap" 
        args="/semantic_costmap /move_base/global_costmap/semantic_layer" />
        
  <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" respawn="true" output="screen">
    <param name="delay" value="0.5"/>  <!-- Wait for EKF stabilization -->
    <param name="port" value="/dev/ttyTHS1"/>
    <param name="baud" value="9600"/>  <!-- Must match what worked in stty -->
    <param name="frame_id" value="gps"/>
    <param name="magnetic_declination_radians" value="0"/>
    <param name="broadcast_cartesian_transform" value="true"/>
    <param name="wait_for_datum" value="false"/>
    <param name="publish_filtered_gps" value="true"/>
    <param name="world_frame" value="map"/>
    <param name="utm_frame" value="utm"/>
    <param name="base_link_frame" value="base_link"/>
    <param name="use_odometry_yaw" value="false"/>
    <remap from="/fix" to="/sensors/gps/fix"/>
    <remap from="/odometry/gps" to="/odometry/gps"/>
    <remap from="/odometry/filtered" to="/odometry/filtered"/>
    <remap from="/imu/data" to="/imu/data"/>

    <!-- <rosparam param="datum">[48.0543062, 8.2031135, 0.0]</rosparam> -->
  </node>


  <node pkg="autobot_ai" type="gps_goal_converter.py" name="gps_goal_converter" output="screen">
    <param name="world_frame" value="map"/>
    <!-- Removed incorrect remapping -->
  </node>


  <!-- ============================================= -->
  <!-- 4. Vision and Navigation Stack -->
  <!-- ============================================= -->
  <node pkg="autobot_ai" type="amr_ai_vision_node.py" name="amr_ai_vision_node" output="screen">
    <param name="use_gpu" value="false" />
    <rosparam param="ipm_size">[160, 160]</rosparam>
    <param name="ipm_resolution" value="0.05" />
    <param name="camera_topic" value="/camera/color/image_raw" />

    <param name="pose_topic" value="/odometry/filtered" />
    <param name="enable_ipm" value="true" />
    <param name="debug_mode" value="true" />

    <!-- <param name="costmap_update_rate" value="1.0"/>  Hz -->



    <remap from="/semantic_costmap" to="/semantic_costmap"/>
  </node>

  <node pkg="autobot_ai" type="odom_to_pose.py" name="odom_to_pose_node" output="screen">
    <remap from="/input_odom" to="/odometry/filtered" />
    <remap from="/output_pose" to="/odometry/filtered_pose" />
  </node>



    <!-- <node pkg="autobot_ai" type="dynamic_goal_adjuster.py" name="dynamic_goal_adjuster" output="screen"/> -->


    <!-- deepseek -->
    <node pkg="move_base" type="move_base" name="move_base" output="screen" respawn="true">


      <!-- Add these parameters -->
      <!-- <param name="global_planner/global_frame" value="odom"/>   -->
      <!-- <param name="NavfnROS/global_frame" value="odom"/>   -->

    
      <!-- 1. First declare you're using DWA -->
      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
      
      <!-- 2. Then load parameters WITH the namespace -->
      <rosparam file="$(find autobot_ai)/config/dwa_local_planner.yaml" command="load" ns="move_base/DWAPlannerROS"/>
      
      <!-- 3. Force critical parameters (optional but recommended) -->
      <param name="move_base/DWAPlannerROS/max_vel_x" value="0.2"/>
      <param name="move_base/DWAPlannerROS/max_vel_trans" value="0.0"/>
      <param name="move_base/DWAPlannerROS/holonomic_robot" value="false"/>  <!-- Correct parameter name -->



      <param name="controller_frequency" value="10.0"/>
      <param name="planner_frequency" value="1.0"/>
      <param name="controller_patience" value="3.0"/>
      <param name="planner_patience" value="5.0"/>
      <param name="recovery_behavior_enabled" value="true"/>
      <param name="clearing_rotation_allowed" value="true"/>
      <param name="~diagnostic_period" value="1.0"/>
      <!-- <remap from="/move_base_simple/goal" to="/adjusted_goal"/> -->


      <!-- Costmap configurations -->
      <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="global_costmap"/>
      <rosparam file="$(find autobot_ai)/config/global_costmap.yaml" command="load" ns="global_costmap"/>
      <rosparam file="$(find autobot_ai)/config/local_costmap.yaml" command="load" ns="local_costmap"/>

      <!-- Global Costmap -->

      <!-- Add these parameters if not present -->
 


      <!-- <param name="global_costmap/global_frame" value="odom"/>
      <param name="global_costmap/rolling_window" value="true"/>
      <param name="global_costmap/always_send_full_costmap" value="false"/>
      <param name="global_costmap/width" value="50.0"/>
      <param name="global_costmap/height" value="50.0"/>
      <param name="global_costmap/static_layer/unknown_cost_value" value="255"/>
      <param name="global_costmap/static_layer/lethal_cost_threshold" value="254"/>
      <param name="global_costmap/static_layer/track_unknown_space" value="true"/> -->
      

      <!-- <param name="global_costmap/static_layer/map_topic" value="/empty_map"/> -->


      <!-- Local Costmap -->
      <param name="local_costmap/global_frame" value="odom"/>
      <param name="local_costmap/rolling_window" value="true"/>
      <param name="local_costmap/enabled" value="true"/>
      <param name="local_costmap/width" value="20.0"/>
      <param name="local_costmap/height" value="20.0"/>
      <param name="local_costmap/update_frequency" value="10.0"/>

      <!-- DWA-specific parameters (optional override inline or in YAML) -->
      <!-- <param name="DWAPlannerROS/holonomic_robot" value="false"/>
      <param name="DWAPlannerROS/acc_lim_x" value="0.2"/>
      <param name="DWAPlannerROS/acc_lim_theta" value="0.5"/>
      <param name="DWAPlannerROS/xy_goal_tolerance" value="0.05"/>
      <param name="DWAPlannerROS/yaw_goal_tolerance" value="0.1"/>
      <param name="DWAPlannerROS/vx_samples" value="10"/>
      <param name="DWAPlannerROS/vy_samples" value="0"/>
      <param name="DWAPlannerROS/max_vel_y" value="0.0"/>  
      <param name="DWAPlannerROS/min_vel_y" value="0.0"/> 
      <param name="DWAPlannerROS/vtheta_samples" value="20"/>
      <param name="DWAPlannerROS/sim_time" value="1.5"/>
      <param name="DWAPlannerROS/sim_granularity" value="0.025"/>
      <param name="DWAPlannerROS/path_distance_bias" value="32.0"/>
      <param name="DWAPlannerROS/goal_distance_bias" value="24.0"/>
      <param name="DWAPlannerROS/occdist_scale" value="0.1"/>
      <param name="DWAPlannerROS/forward_point_distance" value="0.325"/> -->

      <!-- Recovery behaviors -->
      <rosparam>
        recovery_behaviors:
          - name: "conservative_reset"
            type: "clear_costmap_recovery/ClearCostmapRecovery"
          - name: "rotate_recovery"
            type: "rotate_recovery/RotateRecovery"
          - name: "aggressive_reset"
            type: "clear_costmap_recovery/ClearCostmapRecovery"
      </rosparam>

      <!-- Topic remapping -->
      <remap from="odom" to="/odometry/filtered"/>
      <remap from="cmd_vel" to="/cmd_vel"/>
      <remap from="scan" to="/scan"/>
    </node>




<!-- cghatgpt -->

  <!-- <node pkg="move_base" type="move_base" name="move_base" output="screen" respawn="true">

    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>

    <param name="controller_frequency" value="20.0"/>
    <param name="planner_frequency" value="1.0"/>
    <param name="controller_patience" value="3.0"/>
    <param name="planner_patience" value="5.0"/>
    <param name="recovery_behavior_enabled" value="true"/>
    <param name="clearing_rotation_allowed" value="true"/>
    <param name="~diagnostic_period" value="1.0"/>

    <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find autobot_ai)/config/global_costmap.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find autobot_ai)/config/dwa_local_planner.yaml" command="load" ns="DWAPlannerROS"/>


    <param name="global_costmap/global_frame" value="odom"/>
    <param name="local_costmap/global_frame" value="odom"/>

    <param name="global_costmap/rolling_window" value="true"/>
    <param name="global_costmap/always_send_full_costmap" value="false"/>
    <param name="global_costmap/width" value="50.0"/>
    <param name="global_costmap/height" value="50.0"/>
    <param name="global_costmap/static_layer/unknown_cost_value" value="255"/>
    <param name="global_costmap/static_layer/lethal_cost_threshold" value="254"/>
    <param name="global_costmap/static_layer/track_unknown_space" value="true"/>

    <param name="local_costmap/rolling_window" value="true"/>
    <param name="local_costmap/enabled" value="true"/>
    <param name="local_costmap/width" value="5.0"/>
    <param name="local_costmap/height" value="5.0"/>
    <param name="local_costmap/update_frequency" value="10.0"/>

    <rosparam ns="DWAPlannerROS">
      holonomic_robot: false  
      max_vel_x: 0.2
      min_vel_x: 0.02
      max_vel_theta: 0.4
      min_vel_theta: 0.1
      max_trans_vel: 0.2
      min_trans_vel: 0.02
      acc_lim_x: 0.1
      acc_lim_theta: 0.1

      path_distance_bias: 35.0
      goal_distance_bias: 20.0
      occdist_scale: 0.05
      forward_point_distance: 0.5

      vel_samples: 20
      theta_samples: 40
      sim_time: 1.0
      sim_granularity: 0.025

      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 0.15
    </rosparam>

    <rosparam>
      recovery_behaviors:
        - name: "conservative_reset"
          type: "clear_costmap_recovery/ClearCostmapRecovery"
        - name: "rotate_recovery"
          type: "rotate_recovery/RotateRecovery"
        - name: "aggressive_reset"
          type: "clear_costmap_recovery/ClearCostmapRecovery"
    </rosparam>

    <remap from="odom" to="/odometry/filtered"/>
    <remap from="cmd_vel" to="/cmd_vel"/>
    <remap from="scan" to="/scan"/>

  </node> -->







  <!-- <node pkg="explore_lite" type="explore" name="explorer" output="screen">
    <param name="min_frontier_size" value="0.5"/>
    <param name="potential_scale" value="5.0"/>
    <param name="gain_scale" value="3.0"/>
    <param name="transform_tolerance" value="0.5"/>
    <remap from="costmap" to="/move_base/global_costmap/costmap"/>
  </node> -->





  <!-- Node to forward cmd_vel to Arduino over serial -->
  <node pkg="autobot_ai" 
        type="cmd_vel_to_serial.py" 
        name="cmd_vel_to_serial" 
        output="screen">
    
    <!-- Optional: Configure serial port parameter -->
    <param name="serial_port" value="/dev/ttyACM0" />
    <param name="baud_rate" value="115200" />
  </node>




  <!-- <node pkg="topic_tools" type="relay" name="costmap_relay" args="/semantic_costmap /move_base/global_costmap/static_layer_map"/> -->


  <!-- ============================================= -->
  <!-- 5. Visualization -->
  <!-- ============================================= -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find autobot_ai)/rviz/ai_vision.rviz" output="screen" />
  <node pkg="rqt_graph" type="rqt_graph" name="rqt_graph" />
</launch>







  <!-- <node pkg="move_base" type="move_base" name="move_base" output="screen" respawn="true">
    <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find autobot_ai)/config/dwb_local_planner.yaml" command="load"/>

    <rosparam file="$(find autobot_ai)/config/global_costmap.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find autobot_ai)/config/local_costmap.yaml" command="load" ns="local_costmap"/>

    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
    <param name="local_costmap/robot_base_frame" value="base_link"/>

    <param name="planner_frequency"   value="1.0"/>
    <param name="controller_frequency" value="10.0"/>


    <param name="global_costmap/static_layer/map_topic" value="/semantic_costmap"/>
    <param name="global_costmap/static_layer/subscribe_to_updates" value="true"/>
    <param name="global_costmap/static_layer/track_unknown_space" value="true"/>
    <param name="global_costmap/static_layer/combination_method" value="1"/>

    <param name="local_costmap/static_layer/map_topic" value="/semantic_costmap"/>
    <param name="local_costmap/static_layer/subscribe_to_updates" value="true"/>
    <param name="local_costmap/static_layer/track_unknown_space" value="true"/>
    <param name="local_costmap/static_layer/combination_method" value="1"/>

    <param name="conservative_reset/reset_distance" value="3.0"/>
    <param name="clearing_rotation_allowed" value="true"/>
    <param name="recovery_behavior_enabled" value="true"/>
    <param name="global_costmap/obstacle_layer/enabled" value="false"/>
    <param name="local_costmap/obstacle_layer/enabled"  value="false"/>
    <remap from="/odom" to="/odometry/filtered"/>
    <remap from="/odom" to="/rtabmap/odom"/>
      ADD RECOVERY BEHAVIORS BELOW
    <rosparam>
      recovery_behaviors:
        - name: "conservative_reset"
          type: "clear_costmap_recovery/ClearCostmapRecovery"
        - name: "aggressive_reset"
          type: "clear_costmap_recovery/ClearCostmapRecovery"
          reset_distance: 5.0
        - name: "rotate_only"
          type: "rotate_recovery/RotateRecovery"
    </rosparam> 

    

  </node> -->



  <!-- RTAB-Map Localization
  <node pkg="rtabmap_ros" type="rtabmap" name="rtabmap" output="screen">
    <param name="frame_id" value="base_link"/>
    <param name="odom_frame_id" value="odom"/>
    
    <param name="Mem/IncrementalMemory" value="false"/>
    <param name="Mem/InitWMWithAllNodes" value="true"/>
    
    <param name="subscribe_rgb" value="true"/>
    <param name="subscribe_depth" value="true"/>
    <param name="subscribe_stereo" value="false"/>
    <remap from="rgb/image" to="/camera/color/image_raw"/>
    <remap from="depth/image" to="/camera/depth/image_raw"/>
    <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
    
    <param name="Reg/Force3DoF" value="true"/>
    <param name="Vis/FeatureType" value="6"/>
    <param name="Vis/MaxFeatures" value="400"/>
    <param name="Mem/STMSize" value="5"/>
    <param name="Mem/BadSignaturesIgnored" value="true"/>
    <param name="RGBD/OptimizeMaxError" value="0.5"/>
    <param name="RGBD/NeighborLinkRefining" value="true"/>
    <param name="Reg/Strategy" value="1"/>
    <param name="Icp/CorrespondenceRatio" value="0.3"/>
    <param name="Vis/MinInliers" value="10"/>

    <param name="publish_tf_odom" value="true"/>
    <param name="publish_odom" value="true"/>
    <remap from="odom" to="/rtabmap/odom"/>  Match what EKF expects

  </node> -->

  


  <!-- Global Planner (Alternative)
  <node pkg="global_planner" type="planner" name="global_planner" output="screen">
    <remap from="costmap" to="/move_base/global_costmap/costmap"/>
    <remap from="make_plan" to="/move_base/make_plan"/>
    <rosparam file="$(find autobot_ai)/config/global_planner.yaml" command="load" />
  </node> -->

  <!-- Navigation Controller
  <node pkg="autobot_ai" type="auto_navigation.py" name="auto_navigation_node" output="screen">
    <param name="goal_tolerance" value="0.5"/>
    <param name="replan_interval" value="10.0"/>
    <remap from="move_base_simple/goal" to="/rviz_goal"/>
    <remap from="gps_goal" to="/gps_nav_goal"/>
    <remap from="cmd_vel" to="/nav_vel"/>
    <remap from="odom" to="/odometry/filtered"/>
  </node> -->
<!-- 
  <node pkg="realsense2_camera" type="realsense2_camera_node" name="realsense_node" output="screen" respawn="true">
    <param name="base_frame_id" value="camera_link"/>
    <param name="enable_depth" value="true"/>
    <param name="enable_color" value="true"/>
    <param name="enable_infra" value="false"/>
    
    <param name="color_width" value="640"/>
    <param name="color_height" value="480"/>
    <param name="color_fps" value="15"/>
    <param name="depth_width" value="424"/>
    <param name="depth_height" value="240"/>
    <param name="depth_fps" value="15"/>
    
    <param name="enable_pointcloud" value="false"/>
    <param name="align_depth" value="false"/>
    <param name="filters" value=""/>
    
    <param name="clip_distance" value="1.0"/>
    <param name="linear_accel_cov" value="0.01"/>
    
    <remap from="depth/image_rect_raw" to="camera/depth/image_raw"/>
    <remap from="color/image_raw" to="camera/color/image_raw"/>
  </node> -->




  <!-- <node pkg="move_base" type="move_base" name="move_base" output="screen" respawn="true">
    <param name="global_costmap/global_frame" value="odom"/>
    <param name="local_costmap/global_frame" value="odom"/>
    <param name="global_costmap/robot_base_frame" value="base_link"/>
    <param name="local_costmap/robot_base_frame" value="base_link"/>
    
    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
    <param name="planner_frequency" value="1.0"/>
    <param name="controller_frequency" value="10.0"/>
    
    <param name="global_costmap/static_layer/map_topic" value="/semantic_costmap"/>
    <param name="global_costmap/static_layer/subscribe_to_updates" value="true"/>
    <param name="global_costmap/static_layer/track_unknown_space" value="true"/>
    <param name="global_costmap/static_layer/combination_method" value="1"/>
    
    <param name="local_costmap/static_layer/map_topic" value="/semantic_costmap"/>
    <param name="local_costmap/static_layer/subscribe_to_updates" value="true"/>
    <param name="local_costmap/static_layer/track_unknown_space" value="true"/>
    <param name="local_costmap/static_layer/combination_method" value="1"/>
    <param name="clearing_rotation_allowed" value="false"/>
    <param name="recovery_behavior_enabled" value="false"/>
    <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find autobot_ai)/config/global_costmap.yaml" command="load"/>
    <rosparam file="$(find autobot_ai)/config/local_costmap.yaml" command="load"/>
    <rosparam file="$(find autobot_ai)/config/dwb_local_planner.yaml" command="load"/>
    
    <remap from="odom" to="/odometry/filtered"/>
  </node> -->

  <!-- <node pkg="autobot_ai" type="imu_9axis_node.py" name="imu_9axis_node" output="screen">
      <param name="i2c_bus" value="1"/>
      <param name="i2c_address" value="40"/>
      <param name="frame_id" value="imu_link"/>
      <param name="publish_rate" value="10.0"/>
      <param name="orientation_covariance" value="0.05"/>
      <param name="angular_velocity_covariance" value="0.02"/>
      <param name="linear_acceleration_covariance" value="0.04"/>
      <remap from="/sensors/imu/data" to="/imu/data"/>
      <remap from="/imu/mag" to="/mag"/>
  </node> -->


<!-- 
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_filter_node"
        launch-prefix="bash -c 'sleep 5.0; $0 $@'" output="screen">
      <param name="world_frame" value="map"/>
      <param name="frequency" value="10.0"/>
      <param name="sensor_timeout" value="1.0"/>
      <param name="two_d_mode" value="true"/>
      <param name="odom_frame" value="odom"/>
      <param name="base_link_frame" value="base_link"/>
      <param name="imu0" value="/imu/data"/>
      <rosparam param="imu0_config">[false, false, false, 
                                    true, true, true,
                                    true, true, true, 
                                    false, false, false]</rosparam>
      <param name="odom0" value="/odometry/gps"/>
      <rosparam param="odom0_config">[true, true, false, false, false, false, false, false, false]</rosparam>
      <param name="use_odometry_yaw" value="false"/>
      <param name="print_diagnostics" value="true"/>
      <param name="transform_timeout" value="0.2"/>
      <param name="transform_time_offset" value="0.1"/>
      <remap from="odometry/filtered" to="/localization/filtered_odometry"/>
  </node> -->



<!-- 
  <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" output="screen">
      <param name="world_frame" value="map"/>
      <param name="utm_frame" value="utm"/>
      <param name="utm_zone" value="32N"/>
      <rosparam param="datum">[48.0543062, 8.2031135, 0.0]</rosparam>
      <param name="broadcast_cartesian_transform" value="true"/>
      <param name="use_local_cartesian" value="false"/>
      <param name="zero_altitude" value="true"/>
      <param name="position_covariance_type" value="3"/>
      <param name="delay" value="5.0"/>
      <param name="wait_for_datum" value="true"/>
      <param name="publish_filtered_gps" value="true"/>
      <remap from="imu/data" to="/imu/data"/>
      <remap from="gps/fix" to="/sensors/gps/fix"/>
      <remap from="odometry/gps" to="/odometry/gps"/>
      <remap from="odometry/filtered" to="/localization/filtered_odometry"/>
  </node> -->


 <!-- GPS Node -->
  <!-- <node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="nmea_serial_driver" output="screen">
      <param name="port" value="/dev/ttyTHS1" />
      <param name="baud" value="9600" /> 
      <param name="frame_id" value="gps" />
      <param name="time_ref_source" value="gps" />
      <param name="useRMC" value="false" />
      <remap from="/fix" to="/sensors/gps/fix" />
  </node> -->


    <!-- <node pkg="global_planner" type="planner" name="global_planner" output="screen">
      <param name="allow_unknown" value="true"/>
      <param name="default_tolerance" value="0.5"/>
      
      <param name="costmap/width" value="50.0"/>
      <param name="costmap/height" value="50.0"/>
      <param name="costmap/resolution" value="0.1"/>
      
      <param name="use_dijkstra" value="false"/>
      <param name="use_astar" value="true"/>
      <param name="use_grid_path" value="false"/>
      <param name="use_quadratic" value="true"/>
      
      <remap from="costmap" to="/semantic_map"/>
      <remap from="make_plan" to="/global_planner/make_plan"/>
  </node> -->






<!-- original without base_local_planner -->
  <!-- <node pkg="move_base" type="move_base" name="move_base" output="screen" respawn="true">


    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>


    <param name="controller_frequency" value="20.0"/>
    <param name="planner_frequency" value="1.0"/>
    <param name="controller_patience" value="3.0"/>
    <param name="planner_patience" value="5.0"/>
    <param name="recovery_behavior_enabled" value="true"/>
    <param name="clearing_rotation_allowed" value="true"/>
    <param name="~diagnostic_period" value="1.0"/>

    <rosparam file="$(find autobot_ai)/config/costmap_common.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find autobot_ai)/config/global_costmap.yaml" command="load" ns="global_costmap"/>

    <param name="global_costmap/global_frame" value="odom"/>
    <param name="local_costmap/global_frame" value="odom"/>

    <param name="global_costmap/rolling_window" value="true"/>
    <param name="global_costmap/always_send_full_costmap" value="false"/>
    <param name="global_costmap/width" value="50.0"/>
    <param name="global_costmap/height" value="50.0"/>
    <param name="global_costmap/static_layer/unknown_cost_value" value="255"/>
    <param name="global_costmap/static_layer/lethal_cost_threshold" value="254"/>
    <param name="global_costmap/static_layer/track_unknown_space" value="true"/>

    <param name="local_costmap/rolling_window" value="true"/>
    <param name="local_costmap/enabled" value="true"/>
    <param name="local_costmap/width" value="5.0"/>
    <param name="local_costmap/height" value="5.0"/>
    <param name="local_costmap/update_frequency" value="10.0"/>

    <param name="DWAPlannerROS/max_vel_x" value="0.2"/>
    <param name="DWAPlannerROS/min_vel_x" value="0.02"/>
    <param name="DWAPlannerROS/max_vel_theta" value="0.4"/>
    <param name="DWAPlannerROS/min_vel_theta" value="0.1"/>
    <param name="DWAPlannerROS/max_trans_vel" value="0.2"/>
    <param name="DWAPlannerROS/min_trans_vel" value="0.02"/>

    <param name="DWAPlannerROS/acc_lim_x" value="0.1"/>
    <param name="DWAPlannerROS/acc_lim_theta" value="0.1"/>

    <param name="DWAPlannerROS/path_distance_bias" value="35.0"/>
    <param name="DWAPlannerROS/goal_distance_bias" value="20.0"/>
    <param name="DWAPlannerROS/occdist_scale" value="0.05"/>
    <param name="DWAPlannerROS/forward_point_distance" value="0.5"/>

    <param name="DWAPlannerROS/vel_samples" value="20"/>
    <param name="DWAPlannerROS/theta_samples" value="40"/>
    <param name="DWAPlannerROS/sim_time" value="1.0"/>
    <param name="DWAPlannerROS/sim_granularity" value="0.025"/>

    <param name="DWAPlannerROS/xy_goal_tolerance" value="0.1"/>
    <param name="DWAPlannerROS/yaw_goal_tolerance" value="0.15"/>

    <rosparam>
      recovery_behaviors:
        - name: "conservative_reset"
          type: "clear_costmap_recovery/ClearCostmapRecovery"
        - name: "rotate_recovery"
          type: "rotate_recovery/RotateRecovery"
        - name: "aggressive_reset"
          type: "clear_costmap_recovery/ClearCostmapRecovery"
    </rosparam>

    <remap from="odom" to="/odometry/filtered"/>
    <remap from="cmd_vel" to="/cmd_vel"/>
    <remap from="scan" to="/scan"/>

  </node> -->